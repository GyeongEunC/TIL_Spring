- Controller 작성
* 스프링 MVC의 Controller는 하나의 클래스 내에서 여러 메서드를 작성하고, @RequestMapping 등을 이용해서 URL을 분기하는 구조로 작성할 수 있음.
* 클래스에서 필요한 만큼 메서드 분기를 이용하는 구조로 작성

* 전체 목록보기(list) - Method(Get)
* 등록(register) - Method(Post) - Parameter(모든항목)
* 조회(get) - Method(Get) - Parameter(기본키[= 조회하고자 하는 값])
* 수정(modify) - Method(Post) - Parameter(모든항목)
* 삭제(remove) - Method(Post) - Parameter(기본키)

- Controller Test Code

@Before
	public void setup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build();
	}

* get방식 : log.info(mockMvc.perform(MockMvcRequestBuilders.get("URL 주소")).andReturn().getModelAndView().getModelMap());

* post방식 :  String resultPate = mockMvc.perform(MockMvcRequestBuilders.post("URL 주소").
            	param("bno", "1").param("title", "수정된 테스트 제목").
            	param("content", "수정된 테스트 내용").
            	param("writer", "user000")).
            	andReturn().getModelAndView().getViewName();

--------------------------------------------------------------------------------------------------------------------------------
package org.zerock.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.zerock.domain.BoardVO;
import org.zerock.service.BoardService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@Log4j
@RequestMapping("/board/*")
@AllArgsConstructor
public class BoardController {
	
	private BoardService service;

	@GetMapping("/list")
	public void list(Model model) {
		log.info("list");
		model.addAttribute("list", service.getList());
	}
	
	@PostMapping("/register")
	public String register(BoardVO board, RedirectAttributes rttr) {
		log.info("register : " + board);
		service.register(board);
		rttr.addFlashAttribute("result", board.getBno());
		
		return "redirect:/board/list";
	}
	
	@GetMapping("/get")
	public void get(@RequestParam("bno") Long bno, Model model) {
		log.info("/get");
		model.addAttribute("board", service.get(bno));
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO board, RedirectAttributes rttr) {
		log.info("modify : " + board);
		
		if(service.modify(board)) {
			rttr.addFlashAttribute("result", "success");
		}
		return "redirect:/board/list";
	}
	
	@PostMapping("/remove")
	public String remove(@RequestParam("bno") Long bno, RedirectAttributes rttr) {
		log.info("remove...." + bno);
		
		if(service.remove(bno)) {
			rttr.addFlashAttribute("result", "success");
		}
		return "redirect:/board/list";
	}
	
}
