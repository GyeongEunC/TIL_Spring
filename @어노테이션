어노테이션 분류

- Lombok 관련 : @Setter, @Data, @Log4j
    * @Setter : setter메서드를 생성해주는 역할
		  3가지의 속성 부여 가능(value, onMethod_ : 버전에 따라 _ 기호 사용, onParam : setter메서드의 파라미터에 어노테이션을 사용하는 경우에 적용
	  * @Data : @ToString, @EqualsAndHashCode, @Getter/@Setter, @RequiredArgsConstructor를 모두 결합한 형태로 한 번에 자주 사용되는 모든 메서드를 생성할 수 있다는 장점이 있음
		만일 세부적인 설정이 필요없는 경우라면 @Data를 주로 이용.
  	* @Log4j : 로그 객체 생성 / Log4j가 존재하지 않을 경우에는 @Log 이용 가능
	           	 @Log를 클래스 쪽에 붙여주면 내부적으로 static final로 Logger 객체가 생성되므로 개발 시 별도의 로그를 설정할 필요 없이 필요한 코드를 만들어 낼 수 있음.
               ex)log.info()

- Spring 관련 : @Autowired, @Component
	  * @Component : 해당 클래스가 스프링에서 객체로 만들어서 관리하는 대상임을 명시하는 어노테이션
		               @Component가 존재하는 클래스들을 객체로 생성해서 빈으로 관리하게 됨.
	  * @Autowired : 스프링 내부에서자신이 특정한 객체에 의존적이므로 자신에게 해당 타입의 빈을 주입해주라는 표시

- 테스트 관련 : @RunWith, @ContextConfiguration, @Test
	  * @ContextConfiguration : 스프링이 실행되면서 어떤 설정 정보를 읽어 들어야 하는지를 명시
			                        속성(locations를 이용하여 문자열의 배열로 XML 설정 파일 명시 가능 / classes 속성으로 @ContextConfiguration 이 적용된 클래스 지정 가능)
  	* @RunWith : 테스트 시 필요한 클래스 지정 / 스프링은 SpringJUnit4ClassRunner 클래스가 대상
  	* @Test : junit에서 해당 메서드가 jUnit 상에서 단위 테스트의 대상인지 알려줌
