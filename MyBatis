MyBatis(http://www.mybatis.org/mybatis-3/)

- SQL 매핑(mapping)프레임워크로 분류

- 코드의 복잡한 작업을 피하는 용도로 사용

- 장점 : 자동으로 Connection close() 기능 / MyBatis 내부적으로 PreparedStatement 처리 / #{prop)와 같이 속성을 지정하면 내부적으로 자동처리 / 리턴 타입을 지정하는 경우 자동으로 객체 생성 및 ResultSet 처리

- 핵심객체
	  * SQLSession
  	* SQLSessionFactory : 내부적으로 SQLSession을 만들어내는 존재 / SQLSession을 통해서 Connection을 생성하거나 원하는 SQL전달, 결과를 리턴받는 구조로 작성

- MyBatis-Spring
  	* Mapper 인터페이스를 이용해서 실제 SQL처리가 되는 클래스를 자동 생성
  	* TimeMapper(테스트클래스 명).getClass().getName() 코드를 통해 실제 동작하는 클래스의 이름을 확인할 수 있음.

- XML 매퍼
  	* MyBatis를 이용하여 SQL을 처리할 때 어노테이션을 이용하는 방식이 편리하지만 SQL이 길어지거나 복잡해지는 경우에는 어노테이션보다 XML을 이용하는 방식이 더 유리
  	* MyBatis-Spring의 경우 Mapper 인터페이스와 XML을 동시에 사용 가능. / XML파일 생성할 때 폴더를 한번에 만들면 제대로 인식이 되지 않기 문제가 발생하기 때문에 주의

- MyBatis는 내부적으로 JDBC의 PrepareStatement를 이용하여 SQL처리하기 때문에 SQL에 전달되는 파라미터는 JDBC와 같이 ?로 치환되어 처리됨. ?가 어떤 값으로 처리되었는지 확인하기 위해 기능추가
  	* SQL 로그를 제대로 보기 위해서 log4jdbc-log4j2 라이브러리를 사용

- log4jdbc에서 출력되는 로그 조절 : 추가적인 <logger>를 지정하여 처리
    * 많은양의 로그가 출력되어 불편하다면 좀 더 높은 레벨의 로그만 기록하도록 수정해 줄 수 있음
  	* 기본 설정의 로그는 info레벨이기 때문에 warn과 같은 높은 레벨로 바꿔주어 실행
  	* 기본설정 = <level value="info" />  설정변경 = <level value="warn" />	
